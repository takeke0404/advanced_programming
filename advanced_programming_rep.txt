29114096 長谷川拓也 班:H

各levelの方針

level1
 ビットとばしによって高速化を行う。
level2
 ノイズ除去を行う画像処理、はじめはメディアンフィルタでおこなっていたがぼかしの方が高速にでき、判定することができたため、ぼかしに変更。ビットとばしによって高速化を行う。
level3
 znccの計算によって認識を行おうとしたが処理が重くなり遅くなるため、画像処理は何も行わず、sadの閾値の判定をあまくすることによって高速で認識するようにしている。
level4
  main.cを変更しlevel4用に調整した。調整内容としてはテンプレート画像の背景(黒い色)のときは無視しそれ以外で判定を行う。
level5
 テンプレート画像の大きさを全パターン用意し、それぞれを並列化しマッチングした。ビットとばしによって高速化を行う。
level6
 テンプレート画像の回転したものを全パターン用意し、それぞれを並列化しマッチングした。ビットとばしによって高速化を行う。
level7
 level1からlevel6までの全パターンを並列化することで認識を行っている。
levelinf
 拡大縮小、回転の全パターンの組合わせを用意し、テンプレート画像とカラーでznccでマッチングする。検索漏れ画像をエッジをとり、全テンプレート画像のシルエット画像をつかってsadでマッチングする。


ビット飛ばしについて
探索を行うときにテンプレート画像と元画像を1bitごとにずらして探索するのではなく、3bitずらしによって粗く探索を行い。その後もっともテンプレート画像に近かった場所の回り3*2+1bitの探索を行う。

このビット飛ばし以外にピラミッド探索を実装してみたが結果としてはビット飛ばしの方が高速であった。
理論上ではピラミッド探索の方がはやくなると考えられるが考察としては、
1、コンパイルが優秀でfor文も並列化がすでに行われた状態となっている。
2、テンプレート画像や元画像を縮小変換している時間がかかり、それによって時間がかかる可能性
3、ピラミッド探索のプログラムが高速化できるように作動してない(正解は導き出せる)
2、3の可能性も考えたがこれ以上時間をかけても効果的な高速化が望めないとしてこのピラミッド探索は打ち切った。

ほかにもテンプレート画像の背景が黒色の特性をいかして閾値が0が現れるまで計算を飛ばす方法を実行したがlevel1は0.04s

実行したもの、実行したが様々な要因でやめたもの
残差逐次検定法
疎密探索法
0カット
→ビットとばし
黒あられるまで飛ばす
二値画像化しxorでpopcountを行う
エッジ検出
for文の並列化
github

したかったもの
OpenCVによって特徴点抽出
ディープラーニング
